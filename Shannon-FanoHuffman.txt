#include <bits/stdc++.h>
#include <stdio.h>

using namespace std;
 
struct node {
    string sym;
    float pro;
    int arr[20];
    int top;
} p[20];
 
typedef struct node node;

void shannon(int l, int h, node p[])
{
    float pack1 = 0, pack2 = 0, diff1 = 0, diff2 = 0;
    int i, d, k, j;
    if ((l + 1) == h || l == h || l > h) {
        if (l == h || l > h)
            return;
        p[h].arr[++(p[h].top)] = 0;
        p[l].arr[++(p[l].top)] = 1;
        return;
    }
    else {
        for (i = l; i <= h - 1; i++)
            pack1 = pack1 + p[i].pro;
        pack2 = pack2 + p[h].pro;
        diff1 = pack1 - pack2;
        if (diff1 < 0)
            diff1 = diff1 * -1;
        j = 2;
        while (j != h - l + 1) {
            k = h - j;
            pack1 = pack2 = 0;
            for (i = l; i <= k; i++)
                pack1 = pack1 + p[i].pro;
            for (i = h; i > k; i--)
                pack2 = pack2 + p[i].pro;
            diff2 = pack1 - pack2;
            if (diff2 < 0)
                diff2 = diff2 * -1;
            if (diff2 >= diff1)
                break;
            diff1 = diff2;
            j++;
        }
        k++;
        for (i = l; i <= k; i++)
            p[i].arr[++(p[i].top)] = 1;
        for (i = k + 1; i <= h; i++)
            p[i].arr[++(p[i].top)] = 0;
        shannon(l, k, p);
        shannon(k + 1, h, p);
    }
}
 
void sortByProbability(int n, node p[])
{
    int i, j;
    node temp;
    for (j = 1; j <= n - 1; j++) {
        for (i = 0; i < n - 1; i++) {
            if ((p[i].pro) > (p[i + 1].pro)) {
                temp.pro = p[i].pro;
                temp.sym = p[i].sym;
                p[i].pro = p[i + 1].pro;
                p[i].sym = p[i + 1].sym;
                p[i + 1].pro = temp.pro;
                p[i + 1].sym = temp.sym;
            }
        }
    }
}

void huffman(int n, node p[])
{
    int i, j, temp = 1;
    cout << "\n\nМетод Хаффмена\nСимвол\tВероятность\tКод";
    cout <<"\n"<< p[n-1].sym <<"\t"<<p[n-1].pro<<"\t\t"<<'0';
    for(i = n - 2; i >= 1; i--){
    	cout <<"\n"<< p[i].sym <<"\t"<<p[i].pro<<"\t\t";
    	for(j=0; j<temp; j++)
    		cout<<'1';
    	temp++;
		cout<<'0';
	}
	cout<<"\n"<< p[0].sym <<"\t"<<p[0].pro<<"\t\t";
	for(i=0; i<n-1; i++)
		cout<<'1';
}

void display(int n, node p[])
{
    int i, j;
    cout << "\nМетод Шеннона-Фэно\nСимвол\tВероятность\tКод";
    for (i = n - 1; i >= 0; i--) {
        cout <<"\n"<< p[i].sym <<"\t"<<p[i].pro<<"\t\t";
        for (j = 0; j <= p[i].top; j++)
            cout << p[i].arr[j];
    }
}
 
int main()
{
    int n, m, i, j;
    float total = 0;
    string ch;
    node temp;
    cout<<"Как будете вводить данные (1 - вероятности, 2 - кол-во выпадений): ";
    cin>>m;
    cout<<endl;
    cout<<"Ведите количество символов: ";
    cin>>n;
    for (i = 0; i < n; i++) {
        cout <<"Ведите "<< i + 1 <<" символ: ";
        cin>>ch;
        p[i].sym += ch;
    }
    float x[n];
    cout<<endl;
    if(m==1){
    	cout<<"Сумма вероятностей должна быть равно 1! Вероятности записывать в виде 0.X\n"<<endl;
    	for (i = 0; i < n-1; i++) {
        	cout << "Введите вероятность символа " << p[i].sym << ": ";
        	cin>>x[i];
        	p[i].pro = x[i];
        	total = total + p[i].pro;
        	if (total > 1) {
            	cout << "Ошибка! Сумма больше 1\n";
            	total = total - p[i].pro;
            	i--;
        	}
    	}
    	p[n-1].pro = 1 - total;
    	cout.precision(2);
    	cout << "Вероятность символа " << p[i].sym << ": "<< p[n-1].pro<<endl;
	}
	else{
    	for (i = 0; i < n; i++) {
        	cout << "Введите кол-во символа " << p[i].sym << ": ";
        	cin>>x[i];
        	p[i].pro = x[i];
        	total = total + p[i].pro;
    	}
    	for (i = 0; i < n; i++) {
        	p[i].pro = x[i]/total;
    	}
	}
    sortByProbability(n, p);
    for (i = 0; i < n; i++)
        p[i].top = -1;
    shannon(0, n - 1, p);
    cout.precision(3);
    display(n,p);
    huffman(n,p);
    return 0;
}