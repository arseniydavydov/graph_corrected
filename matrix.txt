#include <iostream>
#include <vector>

using namespace std;

// Функция для вывода списка смежности
void printAdjacencyList(const vector<vector<int>>& adjacencyList) {
    cout << "Список смежности:\n";
    for (int i = 0; i < adjacencyList.size(); ++i) {
        cout << i << ": ";
        for (int j = 0; j < adjacencyList[i].size(); ++j) {
            cout << adjacencyList[i][j] << " ";
        }
        cout << endl;
    }
}

// Функция для вывода матрицы смежности
void printAdjacencyMatrix(const vector<vector<int>>& adjacencyMatrix) {
    cout << "Матрица смежности:\n";
    for (int i = 0; i < adjacencyMatrix.size(); ++i) {
        for (int j = 0; j < adjacencyMatrix[i].size(); ++j) {
            cout << adjacencyMatrix[i][j] << " ";
        }
        cout << endl;
    }
}

// Функция для вывода матрицы инцидентности
void printIncidenceMatrix(const vector<vector<int>>& incidenceMatrix) {
    cout << "Матрица инцидентности:\n";
    for (int i = 0; i < incidenceMatrix.size(); ++i) {
        for (int j = 0; j < incidenceMatrix[i].size(); ++j) {
            cout << incidenceMatrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int numVertices, numEdges;
    bool isDirected;

    cout << "Введите количество вершин: ";
    cin >> numVertices;

    cout << "Введите количество ребер: ";
    cin >> numEdges;

    cout << "Граф ориентированный? (1 - да, 0 - нет): ";
    cin >> isDirected;

    // Инициализация списка смежности
    vector<vector<int>> adjacencyList(numVertices);

    // Инициализация матрицы смежности
    vector<vector<int>> adjacencyMatrix(numVertices, vector<int>(numVertices, 0));

    // Инициализация матрицы инцидентности
    vector<vector<int>> incidenceMatrix(numVertices, vector<int>(numEdges, 0));

    cout << "Введите пары вершин для каждого ребра:\n";
    for (int i = 0; i < numEdges; ++i) {
        int u, v;
        cin >> u >> v;

        // Добавление ребра в список смежности
        adjacencyList[u].push_back(v);

        // Добавление ребра в матрицу смежности
        adjacencyMatrix[u][v] = 1;

        if (!isDirected) {
            adjacencyMatrix[v][u] = 1;
        }

        // Добавление ребра в матрицу инцидентности
        incidenceMatrix[u][i] = 1;
        incidenceMatrix[v][i] = isDirected ? -1 : 1;
    }

    // Вывод результатов
    printAdjacencyList(adjacencyList);
    printAdjacencyMatrix(adjacencyMatrix);
    printIncidenceMatrix(incidenceMatrix);

    return 0;
}